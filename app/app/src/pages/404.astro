---
import { Image } from 'astro:assets'

import Layout from '~/layouts/Layout.astro'

import { i18nFactory, getLocaleUrlList } from '~/i18n'
const _ = i18nFactory(Astro.currentLocale)

import background from '~/assets/background.png'
import closeSvg from '~/assets/icons/close.svg?raw'
import infoSvg from '~/assets/icons/info.svg?raw'
import bookmarkSvg from '~/assets/icons/bookmark.svg?raw'
import discordSvg from '~/assets/icons/discord.svg?raw'
import flagFRSvg from '~/assets/icons/flag-fr.svg?raw'
import flagENSvg from '~/assets/icons/flag-en.svg?raw'

const title = '2GETHER App'
---

<Layout
	title={ title }
	lang="en"
	socialUrl={Astro.site}
>

	<div class="modal-wrapper" id="info-modal">
		<div class="modal">
			<div class="modal-close">
				<Fragment set:html={ closeSvg } />
				<!-- Close -->
			</div>
			<div class="modal-content">
				<h2>{_('What\'s up on 2GETHER in 2024?')}</h2>
				<p>
					Sur les prochaines années 2GETHER évolue !
				</p>
				<p>
					Au programme :
				</p>
				<ul>
					<li>Le bot 2GETHER toujours en ligne !</li>
					<li>Le retour des Giveaways régulier !</li>
					<li>Des channels spéciaux privés ou semi privés, nommés Bulles !</li>
					<li>La possibilités pour les membres de créer des activités !</li>
					<li>Meet Up 2024</li>
					<li>Refonte de la prog, avec un planning mensuel pour mieux s'organiser !</li>
					<li>Refonte du Discord pour inclure les mascottes et améliorer l'ergonomie</li>
					<li>De nouveaux types d'évents gérer par des membres ou des consultants, tel que des soirées QVGDM</li>
					<li>La mise en place petit à petit des projets annoncés lors de 2MORROW</li>
					<li>Un système de calcul de présence, permettant de transformer votre temps sur 2GETHER en argent 2GETHER !</li>
					<li>Les 2COINS vous permettrons de créer des activités, louer des bulles, participer au giveaways, placer des pixels sur le place, ou d'autres intéractions avec les platformes 2GETHER !</li>
				</ul>
				<p>
					En bref, beaucoup de choses arrivent ses prochaines années !
				</p>
			</div>
		</div>
	</div>

	<main>
		<div class="background">
			<Image
				src={ background }
				alt={ `Background illustration for ${ title }` }
				width={ 2560 } // 1440p
			/>
		</div>

		<div class="content">

			<div class="buttons">
				<a href="#info" class="button" id="info-button">
					<Fragment set:html={ infoSvg } />
					{_('What\'s up on 2GETHER in 2024?')}
				</a>
				<a href="https://2gether-asso.fr" class="button">
					<Fragment set:html={ bookmarkSvg } />
					{_('Visit our website')}
				</a>
				<a href="https://discord.2gether-asso.fr" class="button">
					<Fragment set:html={ discordSvg } />
					{_('Join our Discord')}
				</a>
				{getLocaleUrlList(Astro.url, Astro.currentLocale).map(({ locale, url }) =>
					{
						const flagSvg =
							locale === 'fr' ? flagFRSvg :
							locale === 'en' ? flagENSvg :
							null

						return (
							<a href={url} class="button">
								{flagSvg
									&& (
										<Fragment set:html={ flagSvg } />
									)
									|| locale
								}
							</a>
						)
					})
				}
			</div>

		</div>
	</main>

</Layout>

<script>
	function addEventListenersModal(id)
	{
		const button = document.getElementById(`${id}-button`)
		const modal = document.getElementById(`${id}-modal`)

		if (!button || !modal)
		{
			return
		}

		button.addEventListener('click', event =>
			{
				event.preventDefault()
				modal.classList.add('open')
			})

		modal.addEventListener('click', event =>
			{
				if (
					event.target === modal ||
					(event.target as HTMLElement | null)?.closest('.modal-close')
				)
				{
					modal.classList.remove('open')
				}
			})
	}

	addEventListenersModal('info')

	window.addEventListener('keydown', event =>
		{
			if (event.key === 'Escape')
			{
				const openedModals = document.querySelectorAll('.modal-wrapper.open')
				if (openedModals.length > 0)
				{
					event.preventDefault()
					event.stopPropagation()

					openedModals.forEach(modal =>
						{
							modal.classList.remove('open')
						})

					return
				}
			}
		})
</script>

<style lang="scss">
	.modal-wrapper {
		position: fixed;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		display: none;
		justify-content: center;
		align-items: center;
		background-color: rgba(0, 0, 0, .4);
		z-index: 1;
		overflow-x: hidden;

		&.open {
			display: flex;
		}

		.modal {
			position: relative;
			width: 100%;
			max-height: calc(100% - 4rem);
			overflow-x: hidden;
			overflow-y: auto;
			padding: 2rem;
			background-color: #fff;
			box-shadow: 0 0 4rem 4rem rgba(0, 0, 0, .2);

			@media screen and (min-width: calc(300px)) {
				max-width: calc(300px - 4rem);
				margin: 0 auto;
				border-radius: 2rem;
			}

			@media screen and (min-width: calc(300px + 4rem)) {
				max-width: 600px;
				margin: 0 2rem;
			}

			.modal-close {
				position: absolute;
				top: 0;
				right: 0;
				padding: 1rem;
				cursor: pointer;
				z-index: 1;

				> :global(svg) {
					width: 1.5rem;
					height: 1.5rem;
					fill: currentColor;
					flex-shrink: 0;
				}
			}

			.modal-content {
				h2 {
					margin: 0 1.5rem 1rem 0;
				}

				p {
					margin: 0 0 1rem;
				}
			}
		}
	}

	main {
		position: relative;
		display: flex;
		flex-direction: column;
		justify-content: flex-end;
		align-items: center;
		width: 100%;
		height: 100%;
		color: #fff;
		overflow-x: hidden;

		a {
			&, &:link, &:visited {
				color: inherit;
				text-decoration: none;
			}

			&:hover, &:focus {
				color: inherit;
				text-decoration: underline;
			}
		}

		.background {
			position: absolute;
			top: 0;
			left: 0;
			width: 100%;
			height: 100%;
			overflow: hidden;
			z-index: -1;

			img {
				width: 100%;
				height: 100%;
				object-fit: cover;
				object-position: 50% 50%; // center
			}
		}

		.content {
			--background-color: rgba(0, 0, 0, .2);
			background-color: var(--background-color);
			display: flex;
			flex-direction: column;
			justify-content: center;
			align-items: center;
			gap: 2rem;
			padding: 2rem;
			box-shadow: 0 0 4rem 4rem var(--background-color);

			> * {
				margin: 0;
			}

			.buttons {
				display: flex;
				justify-content: center;
				flex-wrap: wrap;
				gap: 1rem;

				> .button {
					display: flex;
					justify-content: center;
					align-items: center;
					gap: .5rem;
					padding: 1rem;
					border-radius: 2rem;
					background-color: rgba(0, 0, 0, .2);
					transition:
						background-color .2s ease-in-out,
						color .2s ease-in-out;

					&:hover, &:focus {
						text-decoration: none;
					}

					&:hover {
						background-color: rgba(0, 0, 0, .6);
						color: #e6ac00;
					}

					> :global(svg) {
						width: 1em;
						height: 1em;
						fill: currentColor;
						flex-shrink: 0;
					}
				}
			}
		}
	}
</style>
